@page "/devices"
@using Models
@using System.Net
@using System.Net.Sockets
@inject ProtectedLocalStorage storage
@inject IDeviceService deviceService
@inject ITCPService tcp

<div class="deviceGrid">
    @if (devices == null || devices.Count == 0){
        <p class="deviceError"> no devices to show</p>
    } else {
        int i = 0;
        @foreach (var esp32 in devices)
        {
            i++;
            int index = i;
            <div class="deviceBox" @onclick="(() => changePopUp(index))">
                <div class="deviceContent">
                    <div class="deviceTitleBox">
                        <p>naam: @esp32.name</p>
                        <p>@index</p>
                    </div>
                    <div class="deviceSmallContentBox">
                        <p>locatie: @esp32.location</p>
                    </div>
                </div>
                <div class="deviceStatus" style=@esp32.status>

                </div>
            </div>
            <div class="devicePopUpContentBox" hidden=@(i != popupwindow)>
                    <div class="exitButton" @onclick="(() => changePopUp(0))">X</div>
                    <div class="devicePopUpTitleBox">
                        <div class="devicePopUpStatus" style=@esp32.status/>
                        <p>@esp32.name</p>
                    </div>
                    <div class="devicePopUpDescription">
                        <p>@esp32.location</p>
                        <p>@esp32.latestLogin</p>
                    </div>
                    <div class="devicePopUpButtons">

                        <div class="devicePopUpButtonBox">
                            <div class="devicePopUpButtonStatus" style=@esp32.statusbutton[0]/>
                            <button class="devicePopUpButton" @onclick=@(_ => setButton(esp32,1))> 
                                disable door
                            </button> 
                        </div>
                        <div class="devicePopUpButtonBox">
                            <div class="devicePopUpButtonStatus" style=@esp32.statusbutton[1]/>
                            <button class="devicePopUpButton" @onclick=@(_ => setButton(esp32,2))> 
                                force open door
                            </button>
                        </div>
                    </div>
                </div>
        }
    }

    
</div>


@code {


    private Gebruiker? currentuser;

    private List<esp32V2>? devices;
    
    
    private int popupwindow = 0;
    
   
    protected void changePopUp(int index){
        Console.WriteLine(index);
        popupwindow = index;
        StateHasChanged();
    }
    protected async void setButton(esp32V2 v, int button){
        
        int x = await v.toggleButton(button);
        //v.statusbutton[button-1] = esp32V2.toColor(x + 1);
        //StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {

        Console.WriteLine("init");
        devices = tcp.getConnectionList().Values.ToList();
        
        Console.WriteLine(devices.Count);
    
        foreach(var dev in devices){
            //dev.stateHasChanged = StateHasChanged;
            dev.status = esp32V2.toColor(2);
            for (int i = 0; i < dev.buttons.Length; i++){
                dev.statusbutton.Add(esp32V2.toColor(1));
            }
            
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {   
        if (firstRender)
            Console.WriteLine("firstrender");

        devices = tcp.getConnectionList().Values.ToList();

        if (firstRender){
            devices.ForEach(d => d.updateDevicePage=notifyChange);
            foreach(var dev in devices){
                await dev.updateData();
            }
        }

        var user = await storage.GetAsync<Gebruiker>("user");
        if (user.Success){
            currentuser = user.Value;
        }
        if (firstRender) StateHasChanged();
    }

    public async void notifyChange(){
        await InvokeAsync(() => {
            Console.WriteLine("updating data");
            StateHasChanged();
        });
    }
    
}